React JS Practical Test Quiz
1. Basic Understanding of React Components
Q1: What is the difference between a functional component and a class component in React? Write an example of both.

2. JSX Syntax
Q2: What is JSX in React? Can you write a simple JSX expression for displaying a greeting message like Hello, John! where John is a dynamic value?

3. State and Props
Q3: Explain the difference between state and props in React.

Q4: Write a simple React component that uses state to toggle between showing and hiding a text message.

4. Event Handling in React
Q5: How do you handle events like clicks, form submissions, etc., in React? Write an example where a button click updates the state.

5. Conditional Rendering
Q6: Write a React component that shows "Welcome User" if the user is logged in (using a boolean isLoggedIn prop) and "Please Log In" if they are not.

6. List Rendering
Q7: Write a React component that takes an array of numbers and renders them as an unordered list.

7. UseEffect Hook
Q8: What is the useEffect hook? Write a simple example where a message is logged to the console every time the component renders or when a specific prop changes.

8. UseState Hook
Q9: Explain the useState hook and how it is used to manage state in functional components. Provide an example of how to increment a counter on each button click.

9. Component Lifecycle
Q10: What are the lifecycle methods in React class components? What is the equivalent of componentDidMount in functional components using hooks?

10. Handling Forms
Q11: Create a simple React form that takes a user's name and email and displays them when the form is submitted. Ensure that you handle form validation to check if the fields are not empty.

11. Component Composition and Reusability
Q12: Create a Card component that accepts title, content, and footer as props. Render the Card component multiple times in another component with different values for each prop.

12. React Router
Q13: How do you set up routing in a React application? Write an example where you navigate between two pages: /home and /about.

13. Handling Asynchronous Data (Fetch API)
Q14: How do you fetch data from an API in React? Write an example using fetch inside useEffect to fetch user data from an API and display it.

14. Context API
Q15: What is the Context API in React? Write a simple example where a parent component provides a value to its child components using React.createContext().

15. Code Optimization and Performance
Q16: What is React.memo() and how does it help in performance optimization? Provide an example of its usage.

Bonus Practical Task
Q17: Implement a simple Todo List App using React where users can:

Add new tasks
Mark tasks as completed
Remove tasks
This quiz is a mix of theory and practical application, so you can assess both the candidateâ€™s understanding of React fundamentals and their ability to implement React features effectively.


You said:
react js practical coding test quiz for interview
ChatGPT said:
Here is a practical React JS coding test quiz for an interview. The test includes tasks that assess a candidate's hands-on React skills.

React JS Practical Coding Test Quiz
1. Build a Functional Component with Props
Task:
Create a React component named Greeting that takes a name prop and renders a greeting message:
Hello, [name]!

Example: If name="Alice", it should render "Hello, Alice!"
2. State Management with useState Hook
Task:
Create a functional component that implements a counter. The component should:

Display the current count.
Have two buttons: one to increment the count and another to decrement it.
Use useState to manage the count.
3. Handling Events
Task:
Create a React component that:

Displays a button labeled "Toggle Message".
When clicked, it toggles the visibility of a message: "React is Awesome!".
Use useState for managing the message visibility.
4. List Rendering
Task:
Create a component that accepts an array of strings (e.g., a list of tasks or names) as a prop and displays them as a list using map().

Example input: ["Task 1", "Task 2", "Task 3"]
Example output: A list of the three tasks.
5. Conditional Rendering
Task:
Create a component that accepts a boolean prop isLoggedIn. If isLoggedIn is true, render "Welcome back, User!". If false, render "Please log in".

6. Form Handling
Task:
Create a React form with:

Two input fields: one for name and one for email.
A submit button.
When the form is submitted, display the name and email values below the form.
Ensure the fields are not empty when the form is submitted.
7. useEffect Hook
Task:
Create a component that:

Fetches user data from a mock API endpoint (https://jsonplaceholder.typicode.com/users) using fetch.
Displays the list of users in a ul element.
Use the useEffect hook to fetch the data once when the component is mounted.
8. React Router Implementation
Task:
Set up a simple React Router configuration with two pages:

A Home page that displays "Welcome to the Home Page".
An About page that displays "About Us".
Use react-router-dom for navigation and link between the pages using Link components.
9. Context API
Task:
Create a simple app with the Context API. The app should have a ThemeContext that manages a theme state (light or dark):

Create a ThemeProvider component that provides the theme to the rest of the app.
Create a ThemeToggle button that switches between light and dark modes when clicked.
The theme should be passed down to the ThemeDisplay component, which should display the current theme.
10. Component Reusability
Task:
Create a reusable Card component. The Card component should:

Accept title, content, and footer props.
Render the card with a title, content, and footer sections.
Then, use this Card component multiple times in a parent component with different props for each instance.

11. React.memo for Performance Optimization
Task:
Create a parent component that renders multiple child components. Each child component should accept a message prop and render it. Wrap the child component in React.memo to prevent unnecessary re-renders when the message prop does not change.

12. Todo List App
Task:
Create a simple Todo List App that includes:

A text input to add a new task.
A button to add the task to the list.
A list of tasks, where each task can be marked as completed by clicking on it.
A button to remove tasks from the list.
Store tasks in the component state.
Bonus Task:
13. Pagination
Task:
Create a simple pagination component that:

Accepts an array of items as props (e.g., a list of users or posts).
Displays only a limited number of items per page (e.g., 5 items per page).
Adds pagination controls to navigate between pages.
